[tool.poetry]
name = "pyrovelocity"
version = "0.2.0b5"
packages = [
    { include = "pyrovelocity", from = "src" },
]
description = "A multivariate RNA Velocity model to estimate future cell states with uncertainty using probabilistic modeling with pyro."
authors = ["pyrovelocity team"]
license = "AGPL-3.0-only"
readme = "README.md"
homepage = "https://github.com/pinellolab/pyrovelocity"
repository = "https://github.com/pinellolab/pyrovelocity"
documentation = "https://pyrovelocity.readthedocs.io"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.urls]
Changelog = "https://github.com/pinellolab/pyrovelocity/releases"

[tool.poetry.dependencies]
python = ">=3.11, <3.12"
# required
adjusttext = ">=0.7.3"
anndata = ">=0.8.0"
astropy = ">=5.2.2"
beartype = ">=0.16.4"
# pinning chex>=0.1.82 is to avoid 
# dm-tree = "0.1.8"
# whose build is broken on Darwin
# https://github.com/NixOS/nixpkgs/blob/4e44fb9c2673c5b58c44deb7e05bcf312a5862cf/pkgs/development/python-modules/dm-tree/default.nix#L52
chex = ">=0.1.85"
click = ">=8.1.7"
colorlog = ">=6.7.0"
# Remove dependency of cospar on scikit-misc
# cospar = { version = ">=0.1.9", source = "pypi" }
# scikit-misc = ">=0.3.1"
# cospar = { git = "https://github.com/cameronraysmith/cospar.git", branch = "dev" }
desert = ">=2022.9.22"
h5py = ">=3.8.0"
hydra-core = ">=1.3.2"
hydra-zen = ">=0.10.0"
jax = ">=0.4.23"
jaxtyping = ">=0.2.25"
jaxlib = ">=0.4.23"
leidenalg = ">=0.9.1"
marshmallow = ">=3.19.0"
mlflow = ">=2.2.2"
omegaconf = ">=2.3.0"
pandas = ">=1.5.3"
pyro-ppl = ">=1.8.3"
pytorch-lightning = ">=1.9.4"
pyyaml = ">=6.0.1"
rich = ">=12.6.0"
scipy = "==1.10.1"
scvelo = ">=0.3.1"
scvi-tools = ">=0.20.3"
statsmodels = ">=0.14.1"
seaborn = ">=0.11.2"
termcolor = ">=2.2.0"
torch = ">=1.13.1"
torchmetrics = ">=0.11.4"
zstandard = ">=0.21.0"

# extras
annoy = {version = ">=1.17.3", optional = true }
black = { version = ">=23.3.0", optional = true }
coverage = {extras = ["toml"], version = ">=6.2", optional = true}
darglint = { version = ">=1.8.1", optional = true }
dparse = { version = ">=0.5.2", optional = true }
dvc = { version = ">=3.0", optional = true }
dvc-gs = { version = ">=2.22.1", optional = true }
flake8 = { version = ">=4.0.1", optional = true }
flake8-bandit = { version = ">=2.1.2", optional = true, source = "pypi" }
flake8-bugbear = { version = ">=21.9.2", optional = true }
flake8-docstrings = { version = ">=1.6.0", optional = true }
flake8-rst-docstrings = { version = ">=0.2.5", optional = true }
furo = { version = ">=2023.5.20", optional = true }
hypothesis = {version = ">=6.71.0", optional = true }
ipython = {version = ">=8.11.0", optional = true}
isort = { version = ">=5.10.1", optional = true }
# see https://jupyterlab-contrib.github.io/migrate_from_classical.html for extensions
jupyterlab = { version = ">=4.0.9", optional = true }
jupytext = { version = ">=1.16.0", optional = true }
matplotlib-venn = { version = ">=0.11.9", optional = true }
mypy = { version = ">=0.930", optional = true }
myst-parser = {version = ">=2.0.0", optional = true}
nbsphinx = { version = ">=0.9.3", optional = true }
pep8-naming = { version = ">=0.12.1", optional = true }
poethepoet = { version = ">=0.16.0", optional = true, source = "pypi" }
pre-commit = { version = ">=2.16.0", optional = true }
pre-commit-hooks = { version = ">=4.1.0", optional = true }
Pygments = { version = ">=2.15.0", optional = true }
pytest = { version = ">=6.2.5", optional = true }
pytest-asyncio = { version = ">=0.21.1", optional = true }
pytest-cov = { version = ">=4.0.0", optional = true }
pytest-mock = { version = ">=3.10.0", optional = true }
python-dotenv = { version = ">=1.0.0", optional = true }
pyupgrade = { version = ">=2.29.1", optional = true }
pyvis = { version = ">=0.3.2", optional = true }
ruff = { version = ">=0.1.5", optional = true }
safety = { version = ">=1.10.3", optional = true }
sphinx = { version = ">=7.0.1", optional = true }
sphinx-autobuild = { version = ">=2021.3.14", optional = true }
sphinx-autodoc-typehints = { version = ">=1.23.3", optional = true }
sphinx-click = { version = ">=4.4.0", optional = true }
sphinx-copybutton = { version = ">=0.5.2", optional = true }
statannotations = { version = ">=0.5.0", optional = true }
typeguard = { version = ">=2.13.3", optional = true }
xdoctest = {extras = ["colors"], version = ">=0.15.10", optional = true }

# Enable with make lock-pip-cpu
# [[tool.poetry.source]]
# name = "pytorch"
# url = "https://download.pytorch.org/whl/cpu"
# priority = "supplemental"

# [tool.poetry.group.cpu]
# optional = true

# [tool.poetry.group.cpu.dependencies]
# # requirements-cpu.txt
# # torch==1.13.1+cpu ; python_version >= "3.10" and python_version < "3.11" and (sys_platform == "linux" or platform_system == "Linux")
# # torch==1.13.1 ; python_version >= "3.10" and python_version < "3.11" and (sys_platform == "darwin" or platform_system == "Darwin")
# torch = [
#   {platform = "linux", version = "1.13.1+cpu", source = "pytorch"},
#   {platform = "darwin", version = "1.13.1", source = "pypi"},
# ]

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = { version = ">=23.3.0", extras = ["jupyter"] }
mypy = ">=1.2.0"
pyright = ">=1.1.336"
ruff = ">=0.1.5"
docformatter = { version = ">=1.7.5", extras = ["tomli"] }


[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
hypothesis = ">=6.72.1"
poethepoet = ">=0.19.0"
pytest = ">=7.3.1"
pytest-asyncio = ">=0.21.1"
pytest-cov = ">=4.0.0"
xdoctest = ">=1.1.1"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
furo = ">=2023.5.20"
jupyterlab = ">=4.0.9"
jupytext = ">=1.16.0"
myst-parser = ">=2.0.0"
nbsphinx = ">=0.9.3"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.23.3"
sphinx-click = ">=4.4.0"
sphinx-copybutton = ">=0.5.2"
sphinx = ">=7.0.1"

[tool.poetry.group.workflows]
optional = true

[tool.poetry.group.workflows.dependencies]
dataclasses_json = ">=0.5.9"
dulwich = ">=0.21.7"
flytekit = ">=1.10.3b5"
mashumaro = ">=3.10"
pyperclip = ">=1.8.2"
python-dotenv = ">=1.0.0"

[tool.poetry.extras]
dev = [
  "black",
  "coverage",
  "darglint",
  "dparse",
  "dvc-gs",
  "dvc",
  "flake8-bandit",
  "flake8-bugbear",
  "flake8-docstrings",
  "flake8-rst-docstrings",
  "flake8",
  "hypothesis",
  "ipython",
  "isort",
  "jupyterlab",
  "jupytext",
  "mypy",
  "pep8-naming",
  "poethepoet",
  "pre-commit-hooks",
  "pre-commit",
  "Pygments",
  "pytest-cov",
  "pytest-mock",
  "pytest",
  "pyupgrade",
  "pyvis",
  "ruff",
  "safety",
  "typeguard",
  "xdoctest",
 ]

 docs = [
  "furo",
  "jupyterlab",
  "jupytext",
  "myst-parser",
  "nbsphinx",
  "sphinx-autobuild",
  "sphinx-autodoc-typehints",
  "sphinx-click",
  "sphinx-copybutton",
  "sphinx",
 ]

plotting = [
  "annoy",
  "matplotlib-venn",
  "statannotations",
]

 pipeline = [
  "python-dotenv",
 ]


[tool.conda-lock]
channels = [
    'nodefaults', 
    'pytorch',
    'nvidia',
    'conda-forge', 
    'bioconda', 
]
platforms = [
    'linux-64',
    # 'linux-aarch64',
    # 'osx-arm64',
    # 'osx-amd64'
]
conda_executor = "mamba"
log_level = "INFO"
virtual_package_spec = "conda/virtual-packages.yml"

[tool.conda-lock.dependencies]
adjusttext = { source = "pypi" }
dataclasses-json = {source = "pypi"}
hydra-zen = {source = "pypi"}
pip = ">=23.2"
poethepoet = {source = "pypi"}

[tool.poe.tasks.conda-lock]
cmd = """
  conda-lock \
  --conda mamba \
  --kind lock \
  --kind env \
  --no-dev-dependencies \
  --filter-categories \
  --category test \
  --category workflows \
  --virtual-package-spec conda/virtual-packages.yml \
  --filename-template "conda/conda-{platform}.lock" \
  --lockfile conda/conda-lock.yml \
  -f pyproject.toml
"""
help = "Runs conda-lock to generate a conda environment lock file derived from package dependencies."

# WORKAROUND: see EOF
# only on Linux and Windows
# https://github.com/python-poetry/poetry/issues/2613#issuecomment-799693903
[tool.poe.tasks.force-cuda11]
cmd = """
  python -m \
  pip install \
  torch==1.13.1+cu111 \
  --extra-index-url https://download.pytorch.org/whl/cu111
"""
help = "Force install torch 1.13.1+cu111 on Linux and Windows."

[tool.poetry.scripts]
pyrovelocity = "pyrovelocity.flytezen.cli:main"

[tool.pytest.ini_options]
addopts = "-rA --disable-warnings --xdoc --cov=src/pyrovelocity/ --cov-report=term-missing"
# addopts = "-rA --disable-warnings --cov=src/pyrovelocity/ --cov-report=term-missing"
asyncio_mode = "strict"
norecursedirs = [
  "app",
  "bazel-*",
  ".direnv",
  ".github",
  "reproducibility",
  "scripts",
]

[tool.coverage.paths]
source = ["src/pyrovelocity"]
tests = ["src/pyrovelocity/tests"]

[tool.coverage.run]
source_pkgs = ["pyrovelocity"]
branch = true
parallel = true
omit = [
  "src/pyrovelocity/__init__.py",
  "src/pyrovelocity/__main__.py",
  "src/pyrovelocity/tests/**",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py37"
line-length = 80
select = []
# select = [
#   "A",
#   # "ARG",
#   # "B",
#   "C",
#   "DTZ",
#   # "E",
#   "EM",
#   # "F",
#   # "FBT",
#   "F401",
#   "I",
#   "ICN",
#   "ISC",
#   # "N",
#   "PLC",
#   "PLE",
#   "PLR",
#   "PLW",
#   "Q",
#   "RUF",
#   # "S",
#   # "T",
#   "TID",
#   "UP",
#   "W",
#   "YTT",
# ]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Allow implicitly concatenated strings on a single line
  "ISC001",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't modify unused imports
  # "F401",
]

[tool.ruff.isort]
known-first-party = ["pyrovelocity"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"src/pyrovelocity/tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pyright]
include = ["src"]
exclude = [
       "**/node_modules",
       "**/__pycache__",
       "**/.hypothesis",
       "**/docs",
]
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryIsInstance = false

[tool.isort]
profile = "black"
force_single_line = true
lines_after_imports = 2

[tool.mypy]
python_version = "3.10"

[[tool.mypy.overrides]]
module = [
  ""
]
ignore_missing_imports = true
warn_unreachable = true
pretty = true
show_column_numbers = true
# show_error_codes = true
show_error_context = true

[build-system]
requires = ["poetry-core>=1.6.0"]
build-backend = "poetry.core.masonry.api"
