name: Run Workflow

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run with tmate.io debugging enabled"
        required: true
        type: boolean
        default: false
      branch:
        description: "Git branch or ref to checkout"
        required: true
        type: string
      revision:
        description: "Git revision to checkout"
        required: true
        type: string
      mode:
        description: "Workflow run mode (local, dev, prod)"
        required: true
        type: string
        default: "local"
      dataset_registry:
        description: "Dataset registry configuration"
        required: true
        type: string
      env_vars_json:
        description: "Environment variables as JSON string"
        required: false
        type: string
        default: "{}"

  workflow_call:
    inputs:
      debug_enabled:
        description: "Run with tmate.io debugging enabled"
        required: true
        type: string
        default: "false"
      branch:
        description: "Git branch or ref to checkout"
        required: true
        type: string
      revision:
        description: "Git revision to checkout"
        required: true
        type: string
      mode:
        description: "Workflow run mode (local, dev, prod)"
        required: true
        type: string
        default: "local"
      dataset_registry:
        description: "Dataset registry configuration"
        required: true
        type: string
      env_vars_json:
        description: "Environment variables as JSON string"
        required: false
        type: string
        default: "{}"
    secrets:
      FLYTECTL_CONFIG:
        required: true
      FLYTE_OAUTH_CLIENT_SECRET:
        required: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  run-workflow:
    runs-on: ubuntu-latest
    env:
      FLYTECTL_CONFIG: ${{ secrets.FLYTECTL_CONFIG }}
      FLYTE_OAUTH_CLIENT_SECRET: ${{ secrets.FLYTE_OAUTH_CLIENT_SECRET }}
      WORKFLOW_IMAGE: ${{ vars.WORKFLOW_IMAGE }}
    strategy:
      matrix:
        python_version: ["3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4.2.2
        with:
          ref: ${{ inputs.branch }}

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          python_version: ${{ matrix.python_version }}
          debug_enabled: ${{ inputs.debug_enabled }}

      - name: Download Flyte config
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # ratchet:actions/download-artifact@v4.1.9
        with:
          name: flyte-config
          path: .flyte/

      - name: Setup tmate debug session
        if: ${{ inputs.debug_enabled == 'true' }}
        uses: mxschmitt/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48 # ratchet:mxschmitt/action-tmate@v3

      - name: Execute workflow
        id: execute
        run: |
          # Create .env file with environment variables from JSON
          # Default values if not specified in JSON
          PYROVELOCITY_TESTING_FLAG="True"
          PYROVELOCITY_UPLOAD_RESULTS="False"
          PYROVELOCITY_CACHE_FLAG="True"
          PYROVELOCITY_OVERWRITE_CACHE="False"
          PYROVELOCITY_LOG_LEVEL="INFO"
          PYROVELOCITY_SEED="42"

          # Parse environment variables from JSON
          ENV_VARS='${{ inputs.env_vars_json }}'
          if [ -n "$ENV_VARS" ] && [ "$ENV_VARS" != "{}" ]; then
            echo "Parsing environment variables from JSON"
            # Parse variables using jq
            if [[ $(jq -r 'has("PYROVELOCITY_TESTING_FLAG")' <<< "$ENV_VARS") == "true" ]]; then
              PYROVELOCITY_TESTING_FLAG=$(jq -r '.PYROVELOCITY_TESTING_FLAG' <<< "$ENV_VARS")
            fi
            if [[ $(jq -r 'has("PYROVELOCITY_UPLOAD_RESULTS")' <<< "$ENV_VARS") == "true" ]]; then
              PYROVELOCITY_UPLOAD_RESULTS=$(jq -r '.PYROVELOCITY_UPLOAD_RESULTS' <<< "$ENV_VARS")
            fi
            if [[ $(jq -r 'has("PYROVELOCITY_CACHE_FLAG")' <<< "$ENV_VARS") == "true" ]]; then
              PYROVELOCITY_CACHE_FLAG=$(jq -r '.PYROVELOCITY_CACHE_FLAG' <<< "$ENV_VARS")
            fi
            if [[ $(jq -r 'has("PYROVELOCITY_OVERWRITE_CACHE")' <<< "$ENV_VARS") == "true" ]]; then
              PYROVELOCITY_OVERWRITE_CACHE=$(jq -r '.PYROVELOCITY_OVERWRITE_CACHE' <<< "$ENV_VARS")
            fi
            if [[ $(jq -r 'has("PYROVELOCITY_LOG_LEVEL")' <<< "$ENV_VARS") == "true" ]]; then
              PYROVELOCITY_LOG_LEVEL=$(jq -r '.PYROVELOCITY_LOG_LEVEL' <<< "$ENV_VARS")
            fi
            if [[ $(jq -r 'has("PYROVELOCITY_SEED")' <<< "$ENV_VARS") == "true" ]]; then
              PYROVELOCITY_SEED=$(jq -r '.PYROVELOCITY_SEED' <<< "$ENV_VARS")
            fi
          fi

          # Write environment variables to .env file
          cat > .env << EOF
          PYROVELOCITY_TESTING_FLAG=$PYROVELOCITY_TESTING_FLAG
          PYROVELOCITY_UPLOAD_RESULTS=$PYROVELOCITY_UPLOAD_RESULTS
          PYROVELOCITY_CACHE_FLAG=$PYROVELOCITY_CACHE_FLAG
          PYROVELOCITY_OVERWRITE_CACHE=$PYROVELOCITY_OVERWRITE_CACHE
          PYROVELOCITY_LOG_LEVEL=$PYROVELOCITY_LOG_LEVEL
          PYROVELOCITY_SEED=$PYROVELOCITY_SEED
          EOF

          # Set up dataset registry and hydra overrides
          DATASET_REGISTRY='${{ inputs.dataset_registry }}'
          HYDRA_OVERRIDES="entity_config.inputs._args_.0.dataset_registry=$DATASET_REGISTRY"

          printf "Using dataset registry configuration:\n\n"
          printf "$DATASET_REGISTRY\n\n"
          printf "Using environment variables:\n"
          cat .env
          printf "HYDRA_OVERRIDES: $HYDRA_OVERRIDES\n\n"

          make run-${{ inputs.mode }} HYDRA_OVERRIDES="$HYDRA_OVERRIDES"

      - name: Print reports tree
        id: print-reports-tree
        if: ${{ inputs.mode == 'local' }}
        run: |
          tree --du -alh ./reports/

      - name: Create reports tarball
        id: save-reports-tar
        if: ${{ inputs.mode == 'local' }}
        run: |
          TAR_FILENAME="reports_${{ inputs.mode }}_${{ inputs.revision }}.tar.gz"
          tar -czf $TAR_FILENAME ./reports/
          tar -tzf $TAR_FILENAME
          echo "REPORTS_TAR=$TAR_FILENAME" >> $GITHUB_ENV

      - name: Upload reports artifact
        if: ${{ inputs.mode == 'local' }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4.6.1
        with:
          name: reports
          path: ${{ env.REPORTS_TAR }}

      - name: Create config tarball
        id: save-hydra-outputs
        run: |
          TAR_FILENAME="hydra_outputs_${{ inputs.mode }}_${{ inputs.revision }}.tar.gz"
          tar -czf $TAR_FILENAME ./outputs/
          tar -tzf $TAR_FILENAME
          echo "HYDRA_OUTPUTS_TAR=$TAR_FILENAME" >> $GITHUB_ENV

      - name: Upload config artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4.6.1
        with:
          name: hydra-outputs-${{ inputs.mode }}
          path: ${{ env.HYDRA_OUTPUTS_TAR }}
