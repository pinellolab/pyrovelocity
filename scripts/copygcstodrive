#!/usr/bin/env bash

set -euo pipefail

display_help() {
    cat << EOF
Usage: $0 [options]

copygcstodrive streams and unarchives .tar.gz files from a Google Cloud Storage bucket
to a Google Drive folder. The following parameters can be set via command-line arguments:

Options:
  -h, --help             Display this help message and exit
  -e, --execution-id ID  Specify the execution ID to use (default: local)
  -j, --jobs N           Number of parallel jobs to run (default: 1, sequential execution)
  -v, --verbose          Enable verbose output
  -d, --dry-run          Perform a dry run without actual file transfer
  -p, --project NAME     Set the project name (default: pyrovelocity)
  -r, --reports PATH     Set the reports path (default: reports)

Example:
  $0 --execution-id local --jobs 4 --project project_name --reports reports_path


EOF
}

EXECUTION_ID="local"
DRY_RUN=false
JOBS=1
VERBOSE=false
PROJECT="pyrovelocity"
REPORTS_PATH="reports"
RCLONE_GCS_CONFIG="${PROJECT}gcs"
RCLONE_DRIVE_CONFIG="${PROJECT}drive"


while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help) display_help; exit 0 ;;
        -e|--execution-id) EXECUTION_ID="$2"; shift ;;
        -j|--jobs) JOBS="$2"; shift ;;
        -p|--project) PROJECT="$2"; shift ;;
        -r|--reports) REPORTS_PATH="$2"; shift ;;
        -v|--verbose) VERBOSE=true ;;
        -d|--dry-run) DRY_RUN=true ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

safe_cleanup() {
    local dir_to_remove="$1"
    
    if [ -z "$dir_to_remove" ]; then
        echo "Error: Empty directory path provided for cleanup. Skipping removal."
        return 1
    fi
    
    if [[ ! "$dir_to_remove" =~ ^/tmp/tmp\. ]] && [[ ! "$dir_to_remove" =~ ^/var/folders/.*/T/tmp\. ]]; then
        echo "Error: '$dir_to_remove' does not appear to be a valid temporary directory. Skipping removal."
        return 1
    fi
    
    if [ ! -d "$dir_to_remove" ]; then
        echo "Warning: Directory '$dir_to_remove' does not exist. Skipping removal."
        return 0
    fi
    
    rm -rf "$dir_to_remove"
    return 0
}

extract_and_upload() {
    local filename="$1"
    local source="$2"
    local destination="$3"
    local tempdir=""
    
    tempdir=$(mktemp -d)
    if [ ! -d "$tempdir" ]; then
        echo "Error: Failed to create temporary directory."
        return 1
    fi
    
    trap 'safe_cleanup "$tempdir"' EXIT
    
    echo ""
    echo "Using tempdir: $tempdir"
    echo ""

    local file_stem
    file_stem="${filename}" 
    while [[ "$file_stem" == *.* ]]; do
        file_stem="${file_stem%.*}"
    done

    echo "Transferring $filename to $destination/$file_stem..."
    rclone cat "${source}${filename}" | tar -xz -C "$tempdir"
    rclone copy --transfers=20 "$tempdir/" "${destination}/${file_stem}/" -P
    
    safe_cleanup "$tempdir"
    trap - EXIT
}

copy_file() {
    local filename="$1"
    local source="$2"
    local destination="$3"
    
    echo "Copying $filename to $destination..."
    rclone copy "${source}${filename}" "${destination}/" -P
}

copy_directory() {
    local dirname="$1"
    local source="$2"
    local destination="$3"
    
    echo "Copying directory $dirname to $destination..."
    rclone copy "${source}${dirname}" "${destination}/${dirname}" -P --create-empty-src-dirs
}

SOURCE="${RCLONE_GCS_CONFIG}:${PROJECT}/${REPORTS_PATH}/${EXECUTION_ID}/"
DESTINATION="${RCLONE_DRIVE_CONFIG}:${PROJECT}/${REPORTS_PATH}/${EXECUTION_ID}"

checkForDependencies() {
    type rclone &>/dev/null || { echo "rclone is required but not installed. Exiting."; exit 1; }
    if [ "$JOBS" -gt 1 ]; then
        type parallel &>/dev/null || { echo "GNU parallel is required for parallel execution but not installed. Exiting."; exit 1; }
    fi

    if ! [[ "$JOBS" =~ ^[0-9]+$ ]] || [ "$JOBS" -lt 1 ]; then
        echo "Error: -j, --jobs must be an integer greater than 0."
        exit 1
    fi
}

run() {
    if [ "$DRY_RUN" = true ]; then
        echo "Performing a dry run..."
        echo "Source: $SOURCE"
        echo "Destination: $DESTINATION"
        return
    fi

    [ "$VERBOSE" = true ] && set -x

    rclone mkdir "$DESTINATION" || { echo "Failed to create destination directory."; exit 1; }
    
    TAR_FILES=$(rclone lsf "$SOURCE" | grep '\.tar\.gz$' || true)
    
    OTHER_FILES=$(rclone lsf "$SOURCE" | grep -E '\.(json|html|tex|md|pdf|png|csv)$' || true)
    
    DIRECTORIES=$(rclone lsf "$SOURCE" | grep '/$' || true)

    if [ "$JOBS" -eq 1 ]; then
        if [ -n "$TAR_FILES" ]; then
            for filename in $TAR_FILES; do
                extract_and_upload "$filename" "$SOURCE" "$DESTINATION"
            done
        fi
        
        if [ -n "$OTHER_FILES" ]; then
            for filename in $OTHER_FILES; do
                copy_file "$filename" "$SOURCE" "$DESTINATION"
            done
        fi
        
        if [ -n "$DIRECTORIES" ]; then
            for dirname in $DIRECTORIES; do
                copy_directory "$dirname" "$SOURCE" "$DESTINATION"
            done
        fi
    else
        export -f extract_and_upload copy_file copy_directory safe_cleanup
        export SOURCE DESTINATION
        
        if [ -n "$TAR_FILES" ]; then
            echo "$TAR_FILES" | parallel -j "$JOBS" --will-cite extract_and_upload {} "$SOURCE" "$DESTINATION"
        fi
        
        if [ -n "$OTHER_FILES" ]; then
            echo "$OTHER_FILES" | parallel -j "$JOBS" --will-cite copy_file {} "$SOURCE" "$DESTINATION"
        fi
        
        if [ -n "$DIRECTORIES" ]; then
            echo "$DIRECTORIES" | parallel -j "$JOBS" --will-cite copy_directory {} "$SOURCE" "$DESTINATION"
        fi
    fi
}

checkForDependencies
run
echo "All files have been processed and uploaded."
